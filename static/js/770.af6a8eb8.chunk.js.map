{"version":3,"file":"static/js/770.af6a8eb8.chunk.js","mappings":"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","sources":["components/App/App.styled.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled'\n\nexport const PhoneBookContainer = styled.div`\n    display : flex;\n    flex-direction: column;\n\n    height: 100vh;\n    justify-content: center;\n    /* align-items: center; */\n    /* font-size: 40px; */\n    color: #010101;\n    margin-left: 30px;\n    \n`\n\n\n\n","import styled from '@emotion/styled'\nimport { Form } from 'formik';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\n\n// export const LabelText = styled.div`\n//     font-size: 20px;\n\n// `\nexport const AddContactBtn = styled(Button)`\n    width:fit-content;\n`\n\n// export const ButtonForm = styled.button`\n//     display: block;\n//     background-color: #fff;\n//     border: 1px grey solid;\n//     border-radius: 4px;\n//     padding: 5px;\n\n//     :hover {\n//         background-color: #337ff8;\n//         color: #fff;\n//     }\n   \n// `\n\n// export const Label = styled.label`\n   \n//     display: block;\n//     margin-bottom: 20px;\n// `\n// export const FormComponent = styled(Form)`\n\n//     border: black 1px solid;\n//     padding: 20px;\n//     width: 300px;\n//     /* margin-top: 400px; */\n// `\n\nexport const FormComponent = styled.form`\n\n    display: flex;\n    flex-direction: column;\n\n    border: #b7b7b7 1px solid;\n    border-radius: 4px;\n    padding: 20px;\n    width: 400px;\n    height: 700px;\n    /* margin-top: 400px; */\n`\n\nexport const ContactsField = styled(TextField)`\n    margin-bottom: 20px;\n`","export const getContact = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;","import { Formik, Field, withFormik } from 'formik';\nimport * as yup from 'yup';\nimport { LabelText, ButtonForm, Label, FormComponent, AddContactBtn, ContactsField } from './ContactForm.styled';\nimport { toast } from 'react-toastify';\nimport { getContact } from 'redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n// import Icon from '@mui/material/Icon';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport ContactsIcon from '@mui/icons-material/Contacts';\n// import Box from '@mui/material/Box';\n\n  \n    \nexport const ContactForm = () => {\n   \n    const contacts = useSelector(getContact);\n    const dispatch = useDispatch();\n    // const [field, meta, helpers] = useField();\n\n\n\n\n      function handleSubmit(e) {\n          e.preventDefault()\n          const form = e.currentTarget;\n        const isDuplicate = contacts.some( contact => contact.name.toLowerCase() === form.elements.name.value.toLowerCase())\n\n        if (isDuplicate) {\n            toast.error(`${form.elements.name.value} is already in contacts`);\n            form.reset();\n            return\n            \n        } else {\n\n           dispatch(addContact({ name: form.elements.name.value.trim(), number: form.elements.number.value.trim() }));\n            form.reset();\n        }\n    }\n\n    \n\n    return (\n        \n        <FormComponent action=\"\"\n            onSubmit={handleSubmit}\n        >\n            <ContactsField type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                 helperText=\"Please enter contact name\"\n                id=\"outlined-basic\"\n                    label=\"Name\"\n                variant=\"outlined\"\n                \n            \n            />\n            <ContactsField\n                inputProps={{ inputMode: 'numeric', pattern: '[0-9/-]*' }}\n                helperText=\"Please enter phone number\"\n                            type=\"tel\"\n                            name=\"number\"\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                id=\"outlined-basic\"\n                    label=\"Phone number\"\n                variant=\"outlined\"\n                \n            />\n            <AddContactBtn variant=\"contained\" type=\"submit\" size='small'>Add contact <PersonAddIcon size=\"small\" style={{marginLeft: '5px', width: '20px'}}/></AddContactBtn>\n        </FormComponent>\n           \n        \n  \n   )\n} \n\n\n\n//---------------------------------------FORMIK-----------------------------------\n// // ПОЧАТКОВІ ЗНАЧЕННЯ ДЛЯ FORMIK\n//     const initialValues = {\n//         name: '',\n//         number: '',\n//     }\n\n//ВАЛІДАЦІЯ ДЛЯ FORMIK\n// const schema = yup.object().shape({\n//         name: yup.string().required(),\n//         number: yup.string().required()\n//   })\n\n//ФУНКЦІЯ САБМІТ ДЛЯ FORMIK\n    // function handleSubmit(values, {resetForm}) {\n        \n    //     const isDuplicate = contacts.some( contact => contact.name.toLowerCase() === values.name.toLowerCase())\n\n    //     if (isDuplicate) {\n    //         toast.error(`${values.name} is already in contacts`);\n    //         resetForm();\n    //         return\n            \n    //     } else {\n\n    //        dispatch(addContact({ name: values.name.trim(), number: values.number.trim() }));\n    //         resetForm();\n    //     }\n    // }\n\n\n\n\n  //РОЗМІТКА ДЛЯ FORMIK\n    //     <Formik\n    //         initialValues={initialValues}\n    //         onSubmit={handleSubmit}\n    //         validationSchema={schema}\n    //     >\n    //       <FormComponent action=\"\">\n    //         <Label htmlFor=\"name\">\n    //                 <LabelText>Name</LabelText>\n    //                 <Field \n    //                     type=\"text\"\n    //                     name=\"name\"\n    //                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //                     title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    //                     required\n                        \n    //                 >\n    //                 </Field>\n    //             </Label>\n                \n    //             <Label htmlFor=\"number\">\n    //                <LabelText>Phone number</LabelText> \n    //                 <Field\n    //                         type=\"tel\"\n    //                         name=\"number\"\n    //                         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    //                         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    //                         required\n    //                     />\n                    \n    //                 </Label>\n    //             {/* <ButtonForm type=\"submit\">Add contact</ButtonForm> */}\n    //             <Button variant=\"contained\" type=\"submit\">Add contact</Button>\n    //         </FormComponent>\n             \n    //   </Formik>","import styled from '@emotion/styled'\n\nexport const List = styled.ul`\n    font-size: 15px;\n    margin: 0;\n    margin-bottom: 30px;\n    margin-top: 15px;\n`\n\nexport const ListItem = styled.li`\n    :not(:last-of-type) {\n        margin-bottom: 5px;\n        \n    }\n`\n\nexport const ContactListBtn = styled.button`\n    margin-left: 10px;\n    font-size: 10px;\n     background-color: #fff;\n    border: 1px grey solid;\n    border-radius: 4px;\n\n    :hover {\n        background-color: #337ff8;\n        color: #fff;\n    }\n`","import { List, ListItem, ContactListBtn } from \"./ContactList.styled\"\nimport { getContact, getFilter } from 'redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from \"redux/contacts/operations\";\n\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n\n\n\nexport function ContactList() {\n\n    const contacts = useSelector(getContact);\n\n\n    const filtered = useSelector(getFilter)\n    const dispatch = useDispatch();\n\n  \n\n\n       const getFilteredContacts = () => {\n         const normalizeFilter = filtered.toLowerCase();\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizeFilter));\n  }\n\n    return (\n        <List>\n\n            {getFilteredContacts().map(({ id, name, number }) => \n                 (\n                \n                    <ListItem key={id}>{name}: {number}\n                    {/* <ContactListBtn type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete</ContactListBtn> */}\n                    {/* <Button variant=\"contained\" type=\"button\" onClick={() => dispatch(deleteContact(id))} startIcon={<DeleteIcon />}>Delete</Button> */}\n                    <IconButton aria-label=\"delete\"\n                        variant=\"contained\"\n                        type=\"button\"\n                        onClick={() => dispatch(deleteContact(id))}\n                        size=\"small\"\n                    \n                    > \n                        <DeleteIcon fontSize=\"inherit\"/>\n                     </IconButton>\n                    </ListItem>\n                    \n                \n                )\n            )}\n           \n        </List>\n    )\n}\n\n","import React from 'react'\n\n// import { FindArea } from 'components/Filter/Filter.styled';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport TextField from '@mui/material/TextField';\n\n\nexport function Filter() {\n    \n    const filteredOption = useSelector(getFilter);\n    const dispatch = useDispatch()\n\n    return (\n         <label htmlFor=\"name\">\n              {/* <FindArea>Find contacts by name</FindArea> */}\n            <TextField\n                id=\"outlined-basic\"\n                label=\"Find contacts by name\"\n                variant=\"outlined\"\n                size='small'\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                onChange={(e)=> dispatch(setFilter(e.target.value))}\n                value={filteredOption}\n                          />\n                </label>\n    )\n   \n}\n","\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { PhoneBookContainer } from '../components/App/App.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { Loader } from 'components/Loader/Loader';\nimport { ThreeDots } from \"react-loader-spinner\";\nimport CircularProgress from '@mui/material/CircularProgress';\n\n\n\n\nconst Contacts = () => {\n\n  const dispatch = useDispatch()\n  const isLoading = useSelector(state => state.contacts.isLoading)\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n  \n  return (\n    <PhoneBookContainer style={\n      {\n      //   display:'flex',\n      // flexDirection: 'column',\n      // justifyContent: 'center',\n      // lignItems: 'center',\n      }\n    } >\n      \n        <h1>PhoneBook</h1>\n        <ContactForm/>\n        \n      <h2>Contacts</h2>\n      <Filter />\n      \n    {isLoading &&     <CircularProgress style={{marginTop:'20px', marginLeft: '20px'}}/>}\n      {!isLoading && <>\n        \n      \n      <ContactList /></>}\n      \n      \n        <ToastContainer\n          autoClose={3000}\n          position=\"top-center\"\n          theme=\"colored\"\n/>\n      </PhoneBookContainer>\n      \n    );\n}\n\n\n\nexport default Contacts"],"names":["PhoneBookContainer","styled","AddContactBtn","Button","FormComponent","ContactsField","TextField","getContact","state","contacts","items","getFilter","filter","ContactForm","useSelector","dispatch","useDispatch","action","onSubmit","e","preventDefault","form","currentTarget","some","contact","name","toLowerCase","elements","value","toast","reset","addContact","trim","number","type","pattern","title","required","helperText","id","label","variant","inputProps","inputMode","size","PersonAdd","style","marginLeft","width","List","ListItem","ContactList","filtered","normalizeFilter","includes","getFilteredContacts","map","IconButton","onClick","deleteContact","Delete","fontSize","Filter","filteredOption","htmlFor","onChange","setFilter","target","isLoading","useEffect","fetchContacts","CircularProgress","marginTop","autoClose","position","theme"],"sourceRoot":""}